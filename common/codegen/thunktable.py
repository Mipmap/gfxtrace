#!/usr/bin/env python

import operator
import os
import sys

kThunkEntryPrefix = "thunk"

class Opts(object): pass

opts = Opts()
opts.precompiledHeader = None
opts.headerName = "thunktable.h"

# -------------------------------------------------------------------------------------------------
def getThunkTableDefinition(epList, callingConvention, isHeader, indents=0):
    indentStr = "\t" * indents

    retVal = []
    retVal.append('// Autogenerated file, to regenerate run "%s"\n' % "./codegen")
    if isHeader:
        retVal.append("\n#include <OpenGL/gl.h>")
        retVal.append('#include "../glext.h"')
        retVal.append('#include <string.h>')
        retVal.append('#define GLAPIENTRY\n')

    if not isHeader:
        if opts.precompiledHeader:
            retVal.append('#include "%s"' % opts.precompiledHeader)
        retVal.append('#include "%s"\n' % opts.headerName)
        retVal.append("static template <typename T>")
        retVal.append("void SetIfNonNull(T** _dst, T* _src)")
        retVal.append("{")
        retVal.append("\tassert(_dst != 0);")
        retVal.append("\tif (_src != 0) {")
        retVal.append("\t\t(*_dst) = _src;")
        retVal.append("\t}")
        retVal.append("}")

    if isHeader:
        retVal.append("%sstruct ThunkTable {" % (indentStr))
        retVal.append("%s\tThunkTable() { memset(0, sizeof(*this)); }" % (indentStr))
        for ep in epList:
            retVal.append("%s\t%s" % (indentStr, ep.asFunctionPointer(callingConvention=callingConvention, prefix=kThunkEntryPrefix)))
        retVal.append("\n%s\tvoid Merge(const ThunkTable& _rhs);" % (indentStr))
    if not isHeader:
        retVal.append("\n%svoid ThunkTable::Merge(const ThunkTable& _rhs) {" % (indentStr))
        for ep in epList:
            thunkName = ep.asGlName(prefix=kThunkEntryPrefix)
            retVal.append("%s\tSetIfNonNull(&%s, _rhs.%s);" % (indentStr, thunkName, thunkName))
        retVal.append("%s}" % (indentStr)) 
    if isHeader:
        retVal.append("%s};\n" % (indentStr))
    return retVal

# -------------------------------------------------------------------------------------------------
def getThunkTable(epList, callingConvention, thunkName, indents=0):
    indentStr = "\t" * indents

    retVal = []
    thunkObjectName = "g%sThunks" % thunkName.capitalize()
    thunkPrefix = "%s_" % thunkName
    retVal.append("%s%s = new ThunkTable;" % (indentStr, thunkObjectName))
    for ep in epList:
        memberName = "%s_%s" % (kThunkEntryPrefix, ep.asGlName())
        retVal.append("%s%s->%s = %s;" % (indentStr, thunkObjectName, memberName, thunkPrefix + ep.asGlName()))
    return retVal

# -------------------------------------------------------------------------------------------------
def NoOES(func):
    return not 'OES' in func.name

# -------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------
def main(argv=None):
    argv = argv if argv is not None else sys.argv[:]

    # TODO: This should come from the command line option that says GL or D3D
    sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..", "codegen/gl")))
    import spec
    entrypoints = spec.getEntryPoints(True, filterFunc=NoOES)

    epList = sorted(entrypoints.itervalues(), key=operator.attrgetter("name"))
    defn = getThunkTableDefinition(epList, "GLAPIENTRY", False, indents=0)

    print "\n".join(defn)

    return 0

# -------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    sys.exit(main())
